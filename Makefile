PYTHON_VERSION := $(subst ., ,$(shell cat .python-version))
PYTHON_MAJOR_VERSION := $(word 1,$(PYTHON_VERSION))
PYTHON_MINOR_VERSION := $(word 2,$(PYTHON_VERSION))
PYTHON_INTERPRETER := python

#################################################################################
# Environment                                                                   #
#################################################################################

# Create a virtual environment for development.
.PHONY: venv
venv: .python-version
	rm -rf venv
	${PYTHON_INTERPRETER} -c \
		'import sys; assert sys.version_info.major == ${PYTHON_MAJOR_VERSION}'
	${PYTHON_INTERPRETER} -c \
		'import sys; assert sys.version_info.minor >= ${PYTHON_MINOR_VERSION}'
	${PYTHON_INTERPRETER} -m venv venv
	. venv/bin/activate; \
		${PYTHON_INTERPRETER} -m pip install --upgrade setuptools; \
		${PYTHON_INTERPRETER} -m pip install --upgrade wheel; \
		${PYTHON_INTERPRETER} -m pip install --upgrade pip; \
		${PYTHON_INTERPRETER} -m pip install -e .[dev]

# Remove every cached file.
.PHONY: clean
clean:
	rm -rf venv
	rm -rf src/*.egg-info
	find . -type f -name "*.py[co]" -delete
	find . -type d -name "__pycache__" -delete

#################################################################################
# Development                                                                   #
#################################################################################

# Create a git tag based on __version__ and push this tag to the remote.
.PHONY: tag
tag:
	. venv/bin/activate; \
		git tag -a v$(shell python setup.py --version) -m 'Version $(shell python setup.py --version)'; \
		git push origin v$(shell python setup.py --version)

# Run all tests.
.PHONY: tests
tests:
	. venv/bin/activate; \
		${PYTHON_INTERPRETER} -m pytest \
			-vv \
			--log-cli-level=INFO \
			--cov-report term \
			--cov=src \
			--basetemp=tests/tmpdir \
			tests/

# Run all non-slow tests.
.PHONY: fasttests
fasttests:
	. venv/bin/activate; \
		${PYTHON_INTERPRETER} -m pytest \
			-vv \
			-m "not slow" \
			--log-cli-level=INFO \
			--cov-report term \
			--cov=src \
			--basetemp=tests/tmpdir \
			tests/

# Lint using flake8.
.PHONY: lint
lint: 
	. venv/bin/activate; \
		${PYTHON_INTERPRETER} -m flake8 src
	. venv/bin/activate; \
		${PYTHON_INTERPRETER} -m flake8 tests


#################################################################################
# Documentation                                                                 #
#################################################################################

# Create documentation using sphinx.
.PHONY: docs
docs:
	. venv/bin/activate; \
		sphinx-apidoc --force -o docs/source -t docs/source/_templates --module-first \
		src/transformlib; \
		$(MAKE) -C docs html
	touch docs/.nojekyll


# Clean documentation generated by sphinx.
.PHONY: clean_docs
clean_docs:
	rm -rf docs/build

# Serve http server with documentation locally.
.PHONY: serve_docs
serve_docs:
	cd docs/build/html && python -m http.server --bind 127.0.0.1
